 #include<iostream>
using namespace std;
# define max 5
class DEQueue
{
private:
    int front,rear;
    int arr[max];
public:
    DEQueue();
    void addFromFront(int);
    void addFromBack(int);
    void deleteFromFront();
    void deleteFromBack();
    void display();
};

DEQueue::DEQueue()
{
    front =-1;
     rear=-1;
}

void DEQueue::addFromFront(int x){
    if((rear+1)%max == front){
        cout<<">>>>>  "<<"queue is full "<<endl;
    }
    else if(front==-1 && rear == -1){
        front=0;
        rear=0;
        arr[front]=x;
        cout<<">>>>>  "<<arr[front]<<" added from front"<<endl;
    }
    else if(front==0){
        front = max -1;
        arr[front]=x;
        cout<<">>>>>  "<<arr[front]<<" added from front"<<endl;
    }
    else{
        front--;
        arr[front]=x;
        cout<<">>>>>  "<<arr[front]<<" added from front"<<endl;
    }
}
void DEQueue::addFromBack(int x){
    if((rear+1)%max == front){
        cout<<">>>>>  "<<"queue is full "<<endl;
    }
    else {
        rear = (rear+1)%max ;
        arr[rear]=x;
        cout<<">>>>>  "<<arr[rear]<<" added from back"<<endl;
        if (front==-1)
        {
            front=0;
        }
        
    }
}
void DEQueue::deleteFromFront(){
    if(front==-1 && rear==-1){
        cout<<">>>>>  "<<"queue is empty "<<endl;
    }
    else if (rear==front)
    {
        cout<<">>>>>  "<<arr[front]<<" deleted from front"<<endl;
        front=-1;
        rear=-1;
    }
    else{
        cout<<">>>>>  "<<arr[front]<<" deleted from front"<<endl;
        front=(front+1)%max;

    }
    
}
void DEQueue::deleteFromBack(){
    if(front==-1 && rear==-1){
        cout<<">>>>>  "<<"queue is empty "<<endl;
    }
    else if (rear==front)
    {
        cout<<">>>>>  "<<arr[rear]<<" deleted from back"<<endl;
        front=-1;
        rear=-1;
    }
    else if(rear==0){
        cout<<">>>>>  "<<arr[rear]<<" deleted from back"<<endl;
        rear = max -1;
    }
    else{
        cout<<">>>>>  "<<arr[rear]<<" deleted from back"<<endl;
        rear--;
        
    }
}
void DEQueue::display(){
        if (front==-1 && rear==-1)
        {
            cout<<"queue is empty"<<endl;
        }
        else{
            int i;
            cout<<"queue is : ";
            for (i = front; i != rear; i=(i+1)%max)
            {
                cout<<arr[i]<<" ";
            }
            cout<<arr[i]<<" ";
            
        }
    }

int main(){
DEQueue q;
int choice,x;
while (true)
{
    cout<<"\n\n1.add from front\n2.add from back\n3.delete from front\n4.delete from back\nenter choice : ";
    cin>>choice;
    cout<<endl;
    if (choice==0)
    {
        break;
    }
    
    switch (choice)
    {
    case 1:
        cout<<"enter value : ";
        cin>>x;
        q.addFromFront(x);
        q.display();
        break;
    
    case 2:
        cout<<"enter value : ";
        cin>>x;
        q.addFromBack(x);
        q.display();
        break;
    
    case 3:
        q.deleteFromFront();
        q.display();
        break;
        
    case 4:
        q.deleteFromBack();
        q.display();
        break;

    default:
        break;
    }
}


return 0;
}