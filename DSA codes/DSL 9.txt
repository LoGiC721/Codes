 //condition 1 : while popping stack should not underflow
//condition 2 : at end stack must be empty
#include<iostream>
#include<string>
using namespace std;
#define max 100
class Stack
{
private:
    int top;
    int size;
    char* arr;
public:
    Stack(int);
    void push(char);
    char pop();
    bool isEmpty();
    bool isFull();
    char peek();
};

Stack::Stack(int s)
{
    size=s;
    top=0;
    this->arr = new char(size);
}

void Stack::push(char a){
    if (!isFull())
    {
        arr[top++]=a;
    }
    else{
        cout<<"overflow"<<endl;
    }
}
char Stack::pop(){
    if (!isEmpty())
    {
        top--;
        return arr[top];
    }
    return char(-1);
    
}
char Stack::peek(){
    if (!isEmpty())
    {
        
        return arr[top-1];
    }
    return char(-1);
    
}
bool Stack::isEmpty(){
    return top==0;
}
bool Stack::isFull(){
    return top==size;
}
bool wellParanthesized(){
    string exp;
    cout<<"Enter string : ";
    cin>>exp;
    Stack s(exp.size());
    for (int i = 0; i < exp.size(); i++)
    {
        if (exp[i]=='[' || exp[i]== '{' || exp[i]=='(')
        {
            s.push(exp[i]);
        }
        else if ((s.peek()=='[' && exp[i]==']') || (s.peek()=='{' && exp[i]== '}') ||( s.peek()=='(' && exp[i] == ')'))
        {
            if (s.isEmpty())
            {
                cout<<"error at "<<i<<" position opening bracket is not found"<<endl;
                return false;
            }
            s.pop();
        }
        else{
            cout<<"error at "<<i<<" position opening bracket is not found"<<endl;
            return false;
        }
    }
    return s.isEmpty();
    
}

int main(){
/*Stack s1(4);
s1.push('c');
s1.push('s');
s1.push('v');
cout<<s1.peek()<<endl;
cout<<"pop"<<s1.pop()<<endl;
cout<<"pop"<<s1.pop()<<endl;
cout<<s1.peek()<<endl;
cout<<"pop"<<s1.pop()<<endl;
cout<<s1.peek()<<endl;*/
char choice;
do
{
    if(wellParanthesized()){
        cout<<"  well paranthesized !! "<<endl;
    }
    else{
        cout<<"  error !!"<<endl;
    }
    cout<<"Continue(y/n) : ";
    cin>>choice;
} while (choice=='y');

return 0;
}